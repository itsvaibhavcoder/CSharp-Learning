# File Handling in C# (Easy Explanation)

File handling in C# allows us to **create, read, write, append, and delete** files using the **System.IO** namespace.

## 1. Important Classes for File Handling

C# provides different classes for file operations:

| Class | Description |
|--------|------------|
| `File` | Provides static methods to work with files (create, delete, copy, move). |
| `FileInfo` | Provides instance methods for file operations. |
| `StreamWriter` | Writes text to a file. |
| `StreamReader` | Reads text from a file. |
| `FileStream` | Reads and writes bytes to a file. |

## 2. Basic File Operations

### (a) Creating & Writing a File (`StreamWriter`)

```csharp
using System;
using System.IO;

class Program
{
    static void Main()
    {
        string path = "test.txt";

        // Create and write text to a file
        using (StreamWriter writer = new StreamWriter(path))
        {
            writer.WriteLine("Hello, this is my first file in C#!");
            writer.WriteLine("File handling is easy!");
        }

        Console.WriteLine("File created and written successfully.");
    }
}
```

âœ… **`StreamWriter` automatically creates the file if it doesnâ€™t exist.**  

### (b) Reading from a File (`StreamReader`)

```csharp
using System;
using System.IO;

class Program
{
    static void Main()
    {
        string path = "test.txt";

        // Read and display file content
        using (StreamReader reader = new StreamReader(path))
        {
            string content = reader.ReadToEnd();
            Console.WriteLine("File Content:\n" + content);
        }
    }
}
```

âœ… **`StreamReader.ReadToEnd()` reads the entire file content.**

### (c) Appending Data to an Existing File

```csharp
using System;
using System.IO;

class Program
{
    static void Main()
    {
        string path = "test.txt";

        // Append text to the file
        using (StreamWriter writer = new StreamWriter(path, true))
        {
            writer.WriteLine("Appending new data to the file.");
        }

        Console.WriteLine("Data appended successfully.");
    }
}
```

âœ… **Passing `true` to `StreamWriter` opens the file in append mode.**  

### (d) Deleting a File (`File` class)

```csharp
using System;
using System.IO;

class Program
{
    static void Main()
    {
        string path = "test.txt";

        if (File.Exists(path))
        {
            File.Delete(path);
            Console.WriteLine("File deleted successfully.");
        }
        else
        {
            Console.WriteLine("File does not exist.");
        }
    }
}
```

âœ… **`File.Exists(path)` checks if the file exists before deleting it.**

## 3. Using `File` Class for Quick Operations

The `File` class provides quick ways to handle files:

```csharp
using System;
using System.IO;

class Program
{
    static void Main()
    {
        string path = "test.txt";

        // Create and write to file
        File.WriteAllText(path, "Hello, C# File Handling!");

        // Read file content
        string content = File.ReadAllText(path);
        Console.WriteLine("File Content:\n" + content);
    }
}
```

âœ… `File.WriteAllText()` and `File.ReadAllText()` are quick ways to work with small text files.

## 4. File Handling with `FileStream` (For Advanced Use)

If you need **byte-level operations**, use `FileStream`:

```csharp
using System;
using System.IO;

class Program
{
    static void Main()
    {
        string path = "test.txt";

        // Writing bytes to a file
        using (FileStream fs = new FileStream(path, FileMode.Create))
        {
            byte[] data = System.Text.Encoding.UTF8.GetBytes("Hello, FileStream!");
            fs.Write(data, 0, data.Length);
        }

        // Reading bytes from a file
        using (FileStream fs = new FileStream(path, FileMode.Open))
        {
            byte[] buffer = new byte[fs.Length];
            fs.Read(buffer, 0, buffer.Length);
            Console.WriteLine("File Content:\n" + System.Text.Encoding.UTF8.GetString(buffer));
        }
    }
}
```

âœ… `FileStream` works for both text and binary files.

## 5. Summary

| Operation | Class/Method |
|-----------|--------------|
| Create/Write | `StreamWriter`, `File.WriteAllText()` |
| Read | `StreamReader`, `File.ReadAllText()` |
| Append | `StreamWriter` (with `true` parameter) |
| Delete | `File.Delete()` |
| File exists? | `File.Exists()` |

## 6. Best Practices

âœ” **Always close streams** (use `using` to handle it automatically).  
âœ” **Check if a file exists** before reading or deleting.  
âœ” **Use `File` class** for small text file operations.  
âœ” **Use `FileStream`** for large files or binary data.  

## Final Thoughts

File handling in C# is simple with `StreamWriter`, `StreamReader`, and `File` class methods. For **more control** over file operations, `FileStream` is useful.

ðŸš€ Now, you can easily **create, read, write, append, and delete** files in C#!
