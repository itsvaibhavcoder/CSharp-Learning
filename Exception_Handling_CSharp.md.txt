# Exception Handling in C# (Easy Explanation)

Exception handling in C# helps prevent crashes and provides a structured way to handle errors during runtime.

## 1. What is an Exception?

An **exception** is an error that occurs during program execution. Example exceptions:

- `DivideByZeroException` â€“ When dividing by zero.
- `NullReferenceException` â€“ When accessing an object that is `null`.
- `FileNotFoundException` â€“ When a file is missing.
- `IndexOutOfRangeException` â€“ When accessing an invalid index in an array.

## 2. Basic Exception Handling (`try-catch`)

### Example: Handling Division by Zero

```csharp
using System;

class Program
{
    static void Main()
    {
        try
        {
            int a = 10, b = 0;
            int result = a / b; // This will cause DivideByZeroException
            Console.WriteLine(result);
        }
        catch (DivideByZeroException ex)
        {
            Console.WriteLine("Error: Cannot divide by zero!");
        }
    }
}
```

âœ… The `try` block contains code that **may cause an exception**.  
âœ… The `catch` block **handles the exception** and prevents program crashes.

## 3. Multiple `catch` Blocks

Different types of exceptions can be handled separately:

```csharp
using System;

class Program
{
    static void Main()
    {
        try
        {
            int[] numbers = { 1, 2, 3 };
            Console.WriteLine(numbers[5]); // Index out of range
        }
        catch (IndexOutOfRangeException ex)
        {
            Console.WriteLine("Error: Array index is out of range!");
        }
        catch (Exception ex)
        {
            Console.WriteLine("General Error: " + ex.Message);
        }
    }
}
```

âœ… **Specific exceptions** should be caught first, then general `Exception`.

## 4. `finally` Block (Always Executes)

The `finally` block **always executes**, even if an exception occurs.

```csharp
using System;

class Program
{
    static void Main()
    {
        try
        {
            Console.WriteLine("Opening file...");
            throw new Exception("File error!"); // Simulate error
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception caught: " + ex.Message);
        }
        finally
        {
            Console.WriteLine("Closing file... (Always executed)");
        }
    }
}
```

âœ… The `finally` block is used for **cleanup tasks** like closing files, releasing resources, etc.

## 5. Throwing Custom Exceptions (`throw`)

You can **manually throw exceptions** using `throw`:

```csharp
using System;

class Program
{
    static void CheckAge(int age)
    {
        if (age < 18)
        {
            throw new ArgumentException("Age must be 18 or above!");
        }
        Console.WriteLine("Valid age: " + age);
    }

    static void Main()
    {
        try
        {
            CheckAge(16);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception: " + ex.Message);
        }
    }
}
```

âœ… `throw` is used to generate custom exceptions.

## 6. Creating Custom Exception Classes

You can **create your own exception classes**:

```csharp
using System;

class InvalidAgeException : Exception
{
    public InvalidAgeException(string message) : base(message) { }
}

class Program
{
    static void Main()
    {
        try
        {
            throw new InvalidAgeException("Custom Exception: Invalid Age!");
        }
        catch (InvalidAgeException ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
```

âœ… Inherits from `Exception` and **provides a custom error message**.

## 7. Best Practices for Exception Handling

âœ” **Use specific exceptions** (`DivideByZeroException`, `FileNotFoundException`, etc.).  
âœ” **Use `finally`** for resource cleanup.  
âœ” **Avoid empty `catch` blocks** (they hide errors).  
âœ” **Don't use exceptions for control flow** (use `if-else` for validation instead).  
âœ” **Log exceptions** for debugging and troubleshooting.  

## 8. Summary Table

| Feature | Description |
|---------|------------|
| `try-catch` | Handles exceptions and prevents crashes. |
| `finally` | Runs cleanup code **always**. |
| `throw` | Throws a custom exception. |
| Custom Exception | Create user-defined exceptions. |

## 9. Final Thoughts

Exception handling helps in **building robust applications** by managing runtime errors effectively. Always use **try-catch-finally** wisely to ensure smooth execution.

ðŸš€ Now, you can handle exceptions like a pro in C#!
